{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","data","bodyContainer","styleContainer","options","parser","DocumentParser","renderer","HtmlRenderer","document","ignoreHeight","ignoreWidth","debug","className","inWrapper","Document","load","then","doc","render","PartType","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","Numbering","Promise","all","filter","x","loadDocumentImage","id","this","loadResource","loadNumberingImage","loadFont","relations","rel","length","resolve","target","async","part","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","map","stringAttr","type","values","valueOfRelType","result","domType","children","style","props","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","namespaceURI","namespaces","wordml","getAttributeColorValue","fontSize","getAttributeLengthValue","LengthUsage","FontSize","isDefault","boolAttr","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","section","forEachElementNS","e","pageSize","width","height","orientation","getAttributeNS","pageMargins","left","right","top","bottom","header","footer","gutter","columns","parseColumns","numberOfColumns","getAttributeIntValue","space","separator","getAttributeBoolValue","equalWidth","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","log","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapTopAndBottom","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","start","end","before","after","line","tabs","position","leader","output","valueOfBorder","replace","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","toFixed","Border","Percent","Settings","Theme","StylesWithEffects","Styles","FontTable","WebSettings","Unknown","trim","a","b","checkMask","num","mask","appendClass","classList","element","parseLength","usage","callback","defaultValue","htmlDocument","digitTest","test","clearElement","appendChild","createComment","renderDefaultStyle","renderStyles","renderNumbering","documentElement","renderDocument","renderWrapper","removeChild","processClassName","processStyles","stylesMap","baseValues","baseStyle","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","bodyElement","createElement","renderChildren","renderStyleValues","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","columnCount","String","columnGap","columnRule","styleText","renderStyle","listStyleType","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","styleContent","styleElement","innerHTML","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","into","renderClass","renderCommonProeprties","display","textIndent","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory();\n\telse\n\t\troot[\"docx\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\n    Document,\n    Paragraph,\n    Run,\n    Break,\n    Table,\n    Row,\n    Cell,\n    Hyperlink,\n    Drawing,\n    Image\n}\n\nexport enum DomRelationshipType {\n    Settings,\n    Theme,\n    StylesWithEffects,\n    Styles,\n    FontTable,\n    Image,\n    WebSettings,\n    Unknown\n}\n\nexport interface IDomRelationship {\n    id: string;\n    type: DomRelationshipType;\n    target: string;\n}\n\nexport interface OpenXmlElement {\n    domType: DomType;\n    children?: OpenXmlElement[];\n    style?: IDomStyleValues;\n    className?: string;\n    parent?: OpenXmlElement;\n    t_id?: string;\n}\n\nexport interface DocxTab {\n    style: string;\n    leader: string;\n    position: string;\n}\n\nexport interface IDomHyperlink extends OpenXmlElement {\n    href?: string;\n}\n\nexport interface IDomRun extends OpenXmlElement {\n    id?: string;\n    break?: string;\n    wrapper?: string;\n    text?: string;\n    href?: string;\n    tab?: boolean;\n}\n\nexport interface IDomTable extends OpenXmlElement {\n    columns?: IDomTableColumn[];\n    cellStyle?: IDomStyleValues;\n}\n\nexport interface IDomTableRow extends OpenXmlElement {\n}\n\nexport interface IDomTableCell extends OpenXmlElement {\n    span?: number;\n}\n\nexport interface IDomImage extends OpenXmlElement {\n    src: string;\n}\n\nexport interface IDomTableColumn {\n    width?: string;\n}\n\nexport interface IDomStyle {\n    id: string;\n    name?: string;\n    target: string;\n    basedOn?: string;\n    isDefault?: boolean;\n    styles: IDomSubStyle[];\n}\n\nexport interface IDomSubStyle {\n    target: string;\n    values: IDomStyleValues;\n}\n\nexport interface IDomNumbering {\n    id: string;\n    level: number;\n    style: IDomStyleValues;\n    levelText?: string;\n    format?: string;\n    bullet?: NumberingPicBullet;\n}\n\nexport interface NumberingPicBullet {\n    id: number;\n    src: string;\n    style?: string;\n}\n\nexport interface IDomStyleValues {\n    [name: string]: string;\n}\n","import { Document } from './document';\nimport { DocumentParser } from './document-parser';\nimport { HtmlRenderer } from './html-renderer';\n\nexport interface Options {\n    inWrapper: boolean;\n    ignoreWidth: boolean;\n    ignoreHeight: boolean;\n    debug: boolean;\n    className: string;\n}\n\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options> = null): PromiseLike<any> {\n    var parser = new DocumentParser();\n    var renderer = new HtmlRenderer(window.document);\n\n    options = { \n        ignoreHeight: true,\n        ignoreWidth: false,\n        debug: false,\n        className: \"docx\",\n        inWrapper: true,\n        ... options\n    };\n\n    if (options) {\n        options.ignoreWidth = options.ignoreWidth || parser.ignoreWidth;\n        options.ignoreHeight = options.ignoreHeight || parser.ignoreHeight;\n        parser.debug = options.debug || parser.debug;\n\n        renderer.className = options.className || \"docx\";\n        renderer.inWrapper = options.inWrapper != null ? options.inWrapper : true;\n    }\n\n    return Document.load(data, parser)\n        .then(doc => {\n            renderer.render(doc, bodyContainer, styleContainer, options);\n            return doc;\n        });\n}","import { DocumentParser } from './document-parser';\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\nimport { Font } from './dom/common';\nimport { DocumentElement } from './dom/document';\n\nenum PartType {\n    Document = \"word/document.xml\",\n    Style = \"word/styles.xml\",\n    Numbering = \"word/numbering.xml\",\n    DocumentRelations = \"word/_rels/document.xml.rels\",\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\n}\n\nexport class Document {\n    private zip: JSZip = new JSZip();\n\n    docRelations: IDomRelationship[] = null;\n    fontRelations: IDomRelationship[] = null;\n    numRelations: IDomRelationship[] = null;\n\n    styles: IDomStyle[] = null;\n    fonts: Font[] = null;\n    numbering: IDomNumbering[] = null;\n    document: DocumentElement = null;\n\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\n        var d = new Document();\n\n        return d.zip.loadAsync(blob).then(z => {\n            var files = [\n                d.loadPart(PartType.DocumentRelations, parser),\n                d.loadPart(PartType.FontRelations, parser),\n                d.loadPart(PartType.NumberingRelations, parser),\n                d.loadPart(PartType.Style, parser),\n                d.loadPart(PartType.Numbering, parser),\n                d.loadPart(PartType.Document, parser)\n            ];\n\n            return Promise.all(files.filter(x => x != null)).then(x => d);\n        });\n    }\n\n    loadDocumentImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\n    }\n\n    loadNumberingImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\n    }\n\n    loadFont(id: string): PromiseLike<string> {\n        return this.loadResource(this.fontRelations, id)\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\n    }\n\n    private loadResource(relations: IDomRelationship[], id: string) {\n        let rel = relations.filter(x => x.id == id);\n\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\n    }\n\n    private loadPart(part: PartType, parser: DocumentParser) {\n        var f = this.zip.files[part];\n\n        return f ? f.async(\"string\").then(xml => {\n            switch (part) {\n                case PartType.FontRelations:\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\n                    break;\n\n                case PartType.DocumentRelations:\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\n                    break;\n\n                case PartType.NumberingRelations:\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\n                    break;\n\n                case PartType.Style:\n                    this.styles = parser.parseStylesFile(xml);\n                    break;\n\n                case PartType.Numbering:\n                    this.numbering = parser.parseNumberingFile(xml);\n                    break;\n\n                case PartType.Document:\n                    this.document = parser.parseDocumentFile(xml);\n                    break;\n            }\n\n            return this;\n        }) : null;\n    }\n}\n","import {\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\n} from './dom/dom';\nimport * as utils from './utils';\nimport { SectionProperties, DocumentElement } from './dom/document';\nimport { namespaces, Columns, CommonProperties } from './dom/common';\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\nimport { ParagraphElement } from './dom/paragraph';\n\nexport var autos = {\n    shd: \"white\",\n    color: \"black\",\n    highlight: \"transparent\"\n};\n\nexport class DocumentParser {\n    // removes XML declaration \n    skipDeclaration: boolean = true;\n\n    // ignores page and table sizes\n    ignoreWidth: boolean = false;\n    ignoreHeight: boolean = true;\n    debug: boolean = false;\n\n    parseDocumentRelationsFile(xmlString: string) {\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\n\n        return xml.elements(xrels).map(c => <IDomRelationship>{\n            id: xml.stringAttr(c, \"Id\"),\n            type: values.valueOfRelType(c),\n            target: xml.stringAttr(c, \"Target\"),\n        });\n    }\n\n    parseDocumentFile(xmlString: string) {\n        var result: DocumentElement = {\n            domType: DomType.Document,\n            children: [],\n            style: {},\n            props: null\n        };\n\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\n\n        xml.foreach(xbody, elem => {\n            switch (elem.localName) {\n                case \"p\":\n                    result.children.push(this.parseParagraph(elem));\n                    break;\n\n                case \"tbl\":\n                    result.children.push(this.parseTable(elem));\n                    break;\n\n                case \"sectPr\":\n                    result.props = this.parseSectionProperties(elem);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseStylesFile(xmlString: string): IDomStyle[] {\n        var result = [];\n\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\n\n        xml.foreach(xstyles, n => {\n            switch (n.localName) {\n                case \"style\":\n                    result.push(this.parseStyle(n));\n                    break;\n\n                case \"docDefaults\":\n                    result.push(this.parseDefaultStyles(n));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseDefaultStyles(node: Element): IDomStyle {\n        var result = {\n            id: null,\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: []\n        };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"rPrDefault\":\n                    var rPr = xml.byTagName(c, \"rPr\");\n\n                    if (rPr)\n                        result.styles.push({\n                            target: \"span\",\n                            values: this.parseDefaultProperties(rPr, {})\n                        });\n                    break;\n\n                case \"pPrDefault\":\n                    var pPr = xml.byTagName(c, \"pPr\");\n\n                    if (pPr)\n                        result.styles.push({\n                            target: \"p\",\n                            values: this.parseDefaultProperties(pPr, {})\n                        });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseCommonProperties(elem: Element, props: CommonProperties) {\n        if(elem.namespaceURI != namespaces.wordml)\n            return;\n\n        switch(elem.localName) {\n            case \"color\": \n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\n                break;\n\n            case \"sz\":\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\n                break;\n        }\n    }\n\n    parseStyle(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: xml.className(node, \"styleId\"),\n            isDefault: xml.boolAttr(node, \"default\"),\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: []\n        };\n\n        switch (xml.stringAttr(node, \"type\")) {\n            case \"paragraph\": result.target = \"p\"; break;\n            case \"table\": result.target = \"table\"; break;\n            case \"character\": result.target = \"span\"; break;\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"basedOn\":\n                    result.basedOn = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"name\":\n                    result.name = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"pPr\":\n                    result.styles.push({\n                        target: \"p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"rPr\":\n                    result.styles.push({\n                        target: \"span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.styles.push({\n                        target: \"td\", //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblStylePr\":\n                    for (let s of this.parseTableStyle(n))\n                        result.styles.push(s);\n                    break;\n\n                case \"rsid\":\n                case \"qFormat\":\n                case \"hidden\":\n                case \"semiHidden\":\n                case \"unhideWhenUsed\":\n                case \"autoRedefine\":\n                case \"uiPriority\":\n                    //TODO: ignore\n                    break;\n\n                default:\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\n            }\n        });\n\n        return result;\n    }\n\n    parseTableStyle(node: Element): IDomSubStyle[] {\n        var result = [];\n\n        var type = xml.stringAttr(node, \"type\");\n        var selector = \"\";\n\n        switch (type) {\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\n            case \"firstCol\": selector = \"td.first-col\"; break;\n            case \"lastCol\": selector = \"td.last-col\"; break;\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\n            case \"band2Vert\": selector = \"td.even-col\"; break;\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\n            default: return [];\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    result.push({\n                        target: selector + \" p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"rPr\":\n                    result.push({\n                        target: selector + \" span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.push({\n                        target: selector, //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\n        var result = [];\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\n\n        var mapping = {};\n        var bullets = [];\n\n        xml.foreach(xnums, n => {\n            switch (n.localName) {\n                case \"abstractNum\":\n                    this.parseAbstractNumbering(n, bullets)\n                        .forEach(x => result.push(x));\n                    break;\n\n                case \"numPicBullet\":\n                    bullets.push(this.parseNumberingPicBullet(n));\n                    break;\n\n                case \"num\":\n                    var numId = xml.stringAttr(n, \"numId\");\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\n                    mapping[abstractNumId] = numId;\n                    break;\n            }\n        });\n\n        result.forEach(x => x.id = mapping[x.id]);\n\n        return result;\n    }\n\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\n        var pict = xml.byTagName(elem, \"pict\");\n        var shape = pict && xml.byTagName(pict, \"shape\");\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\n\n        return imagedata ? {\n            id: xml.intAttr(elem, \"numPicBulletId\"),\n            src: xml.stringAttr(imagedata, \"id\"),\n            style: xml.stringAttr(shape, \"style\")\n        } : null;\n    }\n\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\n        var result = [];\n        var id = xml.stringAttr(node, \"abstractNumId\");\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"lvl\":\n                    result.push(this.parseNumberingLevel(id, n, bullets));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\n        var result: IDomNumbering = {\n            id: id,\n            level: xml.intAttr(node, \"ilvl\"),\n            style: {}\n        };\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    this.parseDefaultProperties(n, result.style);\n                    break;\n\n                case \"lvlPicBulletId\":\n                    var id = xml.intAttr(n, \"val\");\n                    result.bullet = bullets.filter(x => x.id == id)[0];\n                    break;\n\n                case \"lvlText\":\n                    result.levelText = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"numFmt\":\n                    result.format = xml.stringAttr(n, \"val\");\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseSectionProperties(elem: Element): SectionProperties {\n        var section = <SectionProperties>{};\n\n        forEachElementNS(elem, namespaces.wordml, e => {\n            switch(e.localName) {\n                case \"pgSz\":\n                    section.pageSize = {\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\n                    }\n                    break;\n\n                case \"pgMar\":\n                    section.pageMargins = {\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\n                    };\n                    break;\n\n                case \"cols\":\n                    section.columns = this.parseColumns(e);\n                    break;\n            }\n        });\n\n        return section;\n    }\n\n    parseColumns(elem: Element): Columns {\n        var result = {\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\n            columns: []\n        };\n\n        forEachElementNS(elem, namespaces.wordml, e => {\n            if(e.localName != \"col\")\n                return;\n\n            result.columns.push({\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\n            });\n        });\n\n        return result;\n    }\n\n    parseParagraph(node: Element): OpenXmlElement {\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n\n                case \"hyperlink\":\n                    result.children.push(this.parseHyperlink(c, result));\n                    break;\n\n                case \"bookmarkStart\":\n                    result.children.push(this.parseBookmark(c));\n                    break;\n\n                case \"pPr\":\n                    this.parseParagraphProperties(c, result);\n                    this.parseCommonProperties(c, result.props);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\n            switch (c.localName) {\n                case \"pStyle\":\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\n                    break;\n\n                case \"cnfStyle\":\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\n                    break;\n\n                case \"numPr\":\n                    this.parseNumbering(c, paragraph);\n                    break;\n\n                case \"framePr\":\n                    this.parseFrame(c, paragraph);\n                    break;\n\n                case \"tabs\":\n                    this.parseTabs(c, paragraph);\n                    break;\n\n                case \"rPr\":\n                    //TODO ignore\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"numId\":\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\n                    break;\n\n                case \"ilvl\":\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\n                    break;\n            }\n        });\n    }\n\n    parseFrame(node: Element, paragraph: ParagraphElement) {\n        var dropCap = xml.stringAttr(node, \"dropCap\");\n\n        if (dropCap == \"drop\")\n            paragraph.style[\"float\"] = \"left\";\n    }\n\n    parseBookmark(node: Element): OpenXmlElement {\n        var result: IDomRun = { domType: DomType.Run };\n\n        result.id = xml.stringAttr(node, \"name\");\n\n        return result;\n    }\n\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\n        var anchor = xml.stringAttr(node, \"anchor\");\n\n        if (anchor)\n            result.href = \"#\" + anchor;\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"t\":\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\n                    console.log(c)\n                    result.id = c.id\n                    break;\n\n                case \"br\":\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\n                    break;\n\n                case \"tab\":\n                    result.tab = true;\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\n                    break;\n\n                case \"drawing\":\n                    let d = this.parseDrawing(c);\n\n                    if (d)\n                        result.children = [d];\n                    break;\n\n                case \"rPr\":\n                    this.parseRunProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRunProperties(elem: Element, run: IDomRun) {\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\n            switch (c.localName) {\n                case \"rStyle\":\n                    run.className = xml.className(c, \"val\");\n                    break;\n\n                case \"vertAlign\":\n                    switch (xml.stringAttr(c, \"val\")) {\n                        case \"subscript\": run.wrapper = \"sub\"; break;\n                        case \"superscript\": run.wrapper = \"sup\"; break;\n                    }\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDrawing(node: Element): OpenXmlElement {\n        for (var n of xml.elements(node)) {\n            switch (n.localName) {\n                case \"inline\":\n                case \"anchor\":\n                    return this.parseDrawingWrapper(n);\n            }\n        }\n    }\n\n    parseDrawingWrapper(node: Element): OpenXmlElement {\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\n        var isAnchor = node.localName == \"anchor\";\n\n        //TODO\n        // result.style[\"left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\n        // result.style[\"top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\n        // result.style[\"right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\n        // result.style[\"bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\n\n        let wrapTopAndBottom = false;\n        let simplePos = xml.boolAttr(node, \"simplePos\");\n\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\n\n        for (var n of xml.elements(node)) {\n            switch (n.localName) {\n                case \"simplePos\":\n                    if (simplePos) {\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    }\n                    break;\n\n                case \"extent\":\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"positionH\":\n                case \"positionV\":\n                    if (!simplePos) {\n                        let pos = n.localName == \"positionH\" ? posX : posY;\n                        var alignNode = xml.byTagName(n, \"align\");\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\n\n                        if (alignNode)\n                            pos.align = alignNode.textContent;\n\n                        if (offsetNode)\n                            pos.offset = xml.sizeValue(node, SizeType.Emu);\n                    }\n                    break;\n\n                case \"wrapTopAndBottom\":\n                    wrapTopAndBottom = true;\n                    break;\n\n                case \"graphic\":\n                    var g = this.parseGraphic(n);\n\n                    if (g)\n                        result.children.push(g);\n                    break;\n            }\n        }\n\n        if (wrapTopAndBottom) {\n            result.style['display'] = 'block';\n\n            if (posX.align) {\n                result.style['text-align'] = posX.align;\n                result.style['width'] = \"100%\";\n            }\n        }\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\n            result.style[\"float\"] = posX.align;\n        }\n\n        return result;\n    }\n\n    parseGraphic(elem: Element): OpenXmlElement {\n        var graphicData = xml.byTagName(elem, \"graphicData\");\n\n        for (let n of xml.elements(graphicData)) {\n            switch (n.localName) {\n                case \"pic\":\n                    return this.parsePicture(n);\n            }\n        }\n\n        return null;\n    }\n\n    parsePicture(elem: Element): IDomImage {\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\n        var blipFill = xml.byTagName(elem, \"blipFill\");\n        var blip = xml.byTagName(blipFill, \"blip\");\n\n        result.src = xml.stringAttr(blip, \"embed\");\n\n        var spPr = xml.byTagName(elem, \"spPr\");\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\n\n        result.style[\"position\"] = \"relative\";\n\n        for (var n of xml.elements(xfrm)) {\n            switch (n.localName) {\n                case \"ext\":\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"off\":\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseTable(node: Element): IDomTable {\n        var result: IDomTable = { domType: DomType.Table, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tr\":\n                    result.children.push(this.parseTableRow(c));\n                    break;\n\n                case \"tblGrid\":\n                    result.columns = this.parseTableColumns(c);\n                    break;\n\n                case \"tblPr\":\n                    this.parseTableProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableColumns(node: Element): IDomTableColumn[] {\n        var result = [];\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"gridCol\":\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableProperties(elem: Element, table: IDomTable) {\n        table.style = {};\n        table.cellStyle = {};\n\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\n            switch (c.localName) {\n                case \"tblStyle\":\n                    table.className = xml.className(c, \"val\");\n                    break;\n\n                case \"tblLook\":\n                    utils.addElementClass(table, values.classNameOftblLook(c));\n                    break;\n\n                case \"tblpPr\":\n                    this.parseTablePosition(c, table);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n\n        switch (table.style[\"text-align\"]) {\n            case \"center\":\n                delete table.style[\"text-align\"];\n                table.style[\"margin-left\"] = \"auto\";\n                table.style[\"margin-right\"] = \"auto\";\n                break;\n\n            case \"right\":\n                delete table.style[\"text-align\"];\n                table.style[\"margin-left\"] = \"auto\";\n                break;\n        }\n    }\n\n    parseTablePosition(node: Element, table: IDomTable) {\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\n\n        table.style[\"float\"] = 'left';\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\n    }\n\n    parseTableRow(node: Element): IDomTableRow {\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tc\":\n                    result.children.push(this.parseTableCell(c));\n                    break;\n\n                case \"trPr\":\n                    this.parseTableRowProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"cnfStyle\":\n                    row.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseTableCell(node: Element): OpenXmlElement {\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tbl\":\n                    result.children.push(this.parseTable(c));\n                    break;\n\n                case \"p\":\n                    result.children.push(this.parseParagraph(c));\n                    break;\n\n                case \"tcPr\":\n                    this.parseTableCellProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"gridSpan\":\n                    cell.span = xml.intAttr(c, \"val\", null);\n                    break;\n\n                case \"vMerge\": //TODO\n                    break;\n\n                case \"cnfStyle\":\n                    cell.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\n        style = style || {};\n\n        xml.foreach(elem, c => {\n            switch (c.localName) {\n                case \"jc\":\n                    style[\"text-align\"] = values.valueOfJc(c);\n                    break;\n\n                case \"textAlignment\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"color\":\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\n                    break;\n\n                case \"sz\":\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\n                    break;\n\n                case \"shd\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\n                    break;\n\n                case \"highlight\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\n                    break;\n\n                case \"tcW\":\n                    if (this.ignoreWidth)\n                        break;\n\n                case \"tblW\":\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\n                    break;\n\n                case \"trHeight\":\n                    this.parseTrHeight(c, style);\n                    break;\n\n                case \"strike\":\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\n                    break;\n\n                case \"b\":\n                    style[\"font-weight\"] = values.valueOfBold(c);\n                    break;\n\n                case \"i\":\n                    style[\"font-style\"] = \"italic\";\n                    break;\n\n                case \"u\":\n                    this.parseUnderline(c, style);\n                    break;\n\n                case \"ind\":\n                    this.parseIndentation(c, style);\n                    break;\n\n                case \"rFonts\":\n                    this.parseFont(c, style);\n                    break;\n\n                case \"tblBorders\":\n                    this.parseBorderProperties(c, childStyle || style);\n                    break;\n\n                case \"tblCellSpacing\":\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\n                    style[\"border-collapse\"] = \"separate\";\n                    break;\n\n                case \"pBdr\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"tcBorders\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"noWrap\":\n                    //TODO\n                    //style[\"white-space\"] = \"nowrap\";\n                    break;\n\n                case \"tblCellMar\":\n                case \"tcMar\":\n                    this.parseMarginProperties(c, childStyle || style);\n                    break;\n\n                case \"tblLayout\":\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\n                    break;\n\n                case \"vAlign\":\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\n                    break;\n\n                case \"spacing\":\n                    this.parseSpacing(c, style);\n                    break;\n\n                case \"lang\":\n                case \"noProof\": //ignore spellcheck\n                case \"webHidden\": // maybe web-hidden should be implemented\n                    //TODO ignore\n                    break;\n\n                default:\n                    if (handler != null && !handler(c))\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\n                    break;\n            }\n        });\n\n        return style;\n    }\n\n    parseUnderline(node: Element, style: IDomStyleValues) {\n        var val = xml.stringAttr(node, \"val\");\n\n        if (val == null || val == \"none\")\n            return;\n\n        switch (val) {\n            case \"dash\":\n            case \"dashDotDotHeavy\":\n            case \"dashDotHeavy\":\n            case \"dashedHeavy\":\n            case \"dashLong\":\n            case \"dashLongHeavy\":\n            case \"dotDash\":\n            case \"dotDotDash\":\n                style[\"text-decoration-style\"] = \"dashed\";\n                break;\n\n            case \"dotted\":\n            case \"dottedHeavy\":\n                style[\"text-decoration-style\"] = \"dotted\";\n                break;\n\n            case \"double\":\n                style[\"text-decoration-style\"] = \"double\";\n                break;\n\n            case \"single\":\n            case \"thick\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"wave\":\n            case \"wavyDouble\":\n            case \"wavyHeavy\":\n                style[\"text-decoration-style\"] = \"wavy\";\n                break;\n\n            case \"words\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n        }\n\n        var col = xml.colorAttr(node, \"color\");\n\n        if (col)\n            style[\"text-decoration-color\"] = col;\n    }\n\n    parseFont(node: Element, style: IDomStyleValues) {\n        var ascii = xml.stringAttr(node, \"ascii\");\n\n        if (ascii)\n            style[\"font-family\"] = ascii;\n    }\n\n    parseIndentation(node: Element, style: IDomStyleValues) {\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\n        var left = xml.sizeAttr(node, \"left\");\n        var start = xml.sizeAttr(node, \"start\");\n        var right = xml.sizeAttr(node, \"right\");\n        var end = xml.sizeAttr(node, \"end\");\n\n        if (firstLine) style[\"text-indent\"] = firstLine;\n        if (left || start) style[\"margin-left\"] = left || start;\n        if (right || end) style[\"margin-right\"] = right || end;\n    }\n\n    parseSpacing(node: Element, style: IDomStyleValues) {\n        var before = xml.sizeAttr(node, \"before\");\n        var after = xml.sizeAttr(node, \"after\");\n        var line = xml.sizeAttr(node, \"line\");\n\n        if (before) style[\"margin-top\"] = before;\n        if (after) style[\"margin-bottom\"] = after;\n        if (line) {\n            style[\"line-height\"] = line;\n            style[\"min-height\"] = line;\n        }\n    }\n\n    parseTabs(node: Element, paragraph: ParagraphElement) {\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\n            position: xml.sizeAttr(n, \"pos\"),\n            leader: xml.stringAttr(n, \"leader\"),\n            style: xml.stringAttr(n, \"val\"),\n        });\n    }\n\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"left\":\n                    output[\"padding-left\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"right\":\n                    output[\"padding-right\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"top\":\n                    output[\"padding-top\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\n                    break;\n            }\n        });\n    }\n\n    parseTrHeight(node: Element, output: IDomStyleValues) {\n        switch (xml.stringAttr(node, \"hRule\")) {\n            case \"exact\":\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                break;\n\n            case \"atLeast\":\n            default:\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                // min-height doesn't work for tr\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \n                break;\n        }\n    }\n\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"start\":\n                case \"left\":\n                    output[\"border-left\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"end\":\n                case \"right\":\n                    output[\"border-right\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"top\":\n                    output[\"border-top\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\n                    break;\n            }\n        });\n    }\n}\n\nenum SizeType {\n    FontSize,\n    Dxa,\n    Emu,\n    Border,\n    Percent\n}\n\nclass xml {\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\n        if (skipDeclaration)\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\n\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\n    }\n\n    static elements(node: Element, tagName: string = null): Element[] {\n        var result = [];\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n            let n = node.childNodes[i] as Element;\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\n                result.push(n);\n        }\n\n        return result;\n    }\n\n    static foreach(node: Element, cb: (n: Element) => void) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n            let n = node.childNodes[i];\n\n            if (n.nodeType == 1)\n                cb(<Element>n);\n        }\n    }\n\n    static byTagName(elem: Element, tagName: string): Element {\n        for (var i = 0; i < elem.childNodes.length; i++) {\n            let n = elem.childNodes[i] as Element;\n            if (n.nodeType == 1 && n.localName == tagName)\n                return <Element>elem.childNodes[i];\n        }\n\n        return null;\n    }\n\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\n        var n = xml.byTagName(elem, nodeName)\n        return n ? xml.stringAttr(n, attrName) : null;\n    }\n\n    static stringAttr(node: Element, attrName: string) {\n        var elem = <Element>node;\n\n        for (var i = 0; i < elem.attributes.length; i++) {\n            var attr = elem.attributes.item(i);\n\n            if (attr.localName == attrName)\n                return attr.value;\n        }\n\n        return null;\n    }\n\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\n        var v = xml.stringAttr(node, attrName);\n\n        switch (v) {\n            case \"yellow\":\n                return v;\n\n            case \"auto\":\n                return autoColor;\n        }\n\n        return v ? `#${v}` : defValue;\n    }\n\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\n        var v = xml.stringAttr(node, attrName);\n\n        switch (v) {\n            case \"1\": return true;\n            case \"0\": return false;\n        }\n\n        return defValue;\n    }\n\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\n        var val = xml.stringAttr(node, attrName);\n        return val ? parseInt(xml.stringAttr(node, attrName)) : 0;\n    }\n\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\n    }\n\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(node.textContent, type);\n    }\n\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\n        if (val == null || val.indexOf(\"pt\") > -1)\n            return val;\n\n        var intVal = parseInt(val);\n\n        switch (type) {\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\n        }\n\n        return val;\n    }\n\n    static className(node: Element, attrName: string) {\n        var val = xml.stringAttr(node, attrName);\n\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\n    }\n}\n\nclass values {\n    static valueOfBold(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\n    }\n\n    static valueOfSize(c: Element, attr: string) {\n        var type: SizeType = SizeType.Dxa;\n\n        switch (xml.stringAttr(c, \"type\")) {\n            case \"dxa\": break;\n            case \"pct\": type = SizeType.Percent; break;\n        }\n\n        return xml.sizeAttr(c, attr, type);\n    }\n\n    static valueOfStrike(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\n    }\n\n    static valueOfMargin(c: Element) {\n        return xml.sizeAttr(c, \"w\");\n    }\n\n    static valueOfRelType(c: Element) {\n        switch (xml.sizeAttr(c, \"Type\")) {\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\n                return DomRelationshipType.Settings;\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\n                return DomRelationshipType.Theme;\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\n                return DomRelationshipType.StylesWithEffects;\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\n                return DomRelationshipType.Styles;\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\n                return DomRelationshipType.FontTable;\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\n                return DomRelationshipType.Image;\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\n                return DomRelationshipType.WebSettings;\n        }\n\n        return DomRelationshipType.Unknown;\n    }\n\n    static valueOfBorder(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        if (type == \"nil\")\n            return \"none\";\n\n        var color = xml.colorAttr(c, \"color\");\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\n\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\n    }\n\n    static valueOfTblLayout(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\n    }\n\n    static classNameOfCnfStyle(c: Element) {\n        let className = \"\";\n        let val = xml.stringAttr(c, \"val\");\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\n\n        if (val[0] == \"1\") className += \" first-row\";\n        if (val[1] == \"1\") className += \" last-row\";\n        if (val[2] == \"1\") className += \" first-col\";\n        if (val[3] == \"1\") className += \" last-col\";\n        if (val[4] == \"1\") className += \" odd-col\";\n        if (val[5] == \"1\") className += \" even-col\";\n        if (val[6] == \"1\") className += \" odd-row\";\n        if (val[7] == \"1\") className += \" even-row\";\n        if (val[8] == \"1\") className += \" ne-cell\";\n        if (val[9] == \"1\") className += \" nw-cell\";\n        if (val[10] == \"1\") className += \" se-cell\";\n        if (val[11] == \"1\") className += \" sw-cell\";\n\n        return className.trim();\n    }\n\n    static valueOfJc(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"start\":\n            case \"left\": return \"left\";\n            case \"center\": return \"center\";\n            case \"end\":\n            case \"right\": return \"right\";\n            case \"both\": return \"justify\";\n        }\n\n        return type;\n    }\n\n    static valueOfTextAlignment(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"auto\":\n            case \"baseline\": return \"baseline\";\n            case \"top\": return \"top\";\n            case \"center\": return \"middle\";\n            case \"bottom\": return \"bottom\";\n        }\n\n        return type;\n    }\n\n    static addSize(a: string, b: string): string {\n        if (a == null) return b;\n        if (b == null) return a;\n\n        return `calc(${a} + ${b})`; //TODO\n    }\n\n    static checkMask(num: number, mask: number) {\n        return (num & mask) == mask;\n    }\n\n    static classNameOftblLook(c: Element) {\n        let className = \"\";\n\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\n\n        return className.trim();\n    }\n}\n","import { OpenXmlElement } from \"./dom/dom\";\n\nexport function addElementClass(element: OpenXmlElement, className: string): string {\n    return element.className = appendClass(element.className, className);\n}\n\nexport function appendClass(classList: string, className: string): string {\n    return (!classList) ? className : `${classList} ${className}`\n}","export const namespaces = {\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\n}\n\nexport interface Length {\n    value: number;\n    type: \"px\" | \"pt\" | \"%\"\n}\n\nexport interface Font {\n    name: string;\n    family: string;\n}\n\nexport interface Column {\n    space: Length;\n    width: Length;\n}\n\nexport interface Columns {\n    space: Length;\n    numberOfColumns: number;\n    separator: boolean;\n    equalWidth: boolean;\n    columns: Column[];\n}\n\nexport interface CommonProperties {\n    fontSize: Length;\n    color: string;\n}","import { Length } from \"../dom/common\";\n\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\n    elem.childNodes.forEach(n => {\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\n            callback(<Element>n);\n    });\n}\n\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\n    var val = elem.getAttributeNS(namespaceURI, name);\n    return val ? parseInt(val) : null;\n}\n\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\n    var val = elem.getAttributeNS(namespaceURI, name);\n    return val ? `#${val}` : null;\n}\n\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\n    var val = elem.getAttributeNS(namespaceURI, name);\n\n    if(val == null)\n        return defaultValue;\n\n    return val === \"true\" || val === \"1\";\n}\n\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\n}\n\nexport enum LengthUsage {\n    Dxa,\n    Emu,\n    FontSize,\n    Border,\n    Percent\n}\n\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\n    if (!val)\n        return null;\n\n    var num = parseInt(val);\n\n    switch (usage) {\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\n    }\n\n    return null;\n}","import { Document } from './document';\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\nimport { Length, CommonProperties } from './dom/common';\nimport { Options } from './docx-preview';\nimport { DocumentElement } from './dom/document';\nimport { ParagraphElement } from './dom/paragraph';\n\nexport class HtmlRenderer {\n\n    inWrapper: boolean = true;\n    className: string = \"docx\";\n    document: Document;\n    options: Partial<Options>;\n\n    private digitTest = /^[0-9]/.test;\n\n    constructor(public htmlDocument: HTMLDocument) {\n    }\n\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options>) {\n        this.document = document;\n        this.options = options;\n\n        styleContainer = styleContainer || bodyContainer;\n\n        this.clearElement(styleContainer);\n        this.clearElement(bodyContainer);\n\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docxjs library predefined styles\"));\n        styleContainer.appendChild(this.renderDefaultStyle());\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docx document styles\"));\n        styleContainer.appendChild(this.renderStyles(document.styles));\n\n        if (document.numbering) {\n            styleContainer.appendChild(this.htmlDocument.createComment(\"docx document numbering styles\"));\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\n        }\n\n        var documentElement = this.renderDocument(document.document);\n\n        if (this.inWrapper) {\n            var wrapper = this.renderWrapper();\n            wrapper.appendChild(documentElement);\n            bodyContainer.appendChild(wrapper);\n        }\n        else {\n            bodyContainer.appendChild(documentElement);\n        }\n    }\n\n    clearElement(elem: HTMLElement) {\n        while (elem.firstChild) {\n            elem.removeChild(elem.firstChild);\n        }\n    }\n\n    processClassName(className: string) {\n        if (!className)\n            return this.className;\n\n        return `${this.className}_${className}`;\n    }\n\n    processStyles(styles: IDomStyle[]) {\n        var stylesMap = {};\n\n        for (let style of styles) {\n            style.id = this.processClassName(style.id);\n            style.basedOn = this.processClassName(style.basedOn);\n\n            stylesMap[style.id] = style;\n        }\n\n        for (let style of styles) {\n            if (style.basedOn) {\n                var baseStyle = stylesMap[style.basedOn];\n\n                for (let styleValues of style.styles) {\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\n\n                    if (baseValues && baseValues.length > 0)\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\n                }\n            }\n        }\n    }\n\n    processElement(element: OpenXmlElement) {\n        if (element.children) {\n            for (var e of element.children) {\n                e.className = this.processClassName(e.className);\n\n                if (e.domType == DomType.Table) {\n                    this.processTable(e);\n                }\n                else {\n                    this.processElement(e);\n                }\n            }\n        }\n    }\n\n    processTable(table: IDomTable) {\n        for (var r of table.children) {\n            for (var c of r.children) {\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\n                ]);\n\n                this.processElement(c);\n            }\n        }\n    }\n\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\n        if (!input)\n            return output;\n\n        if (output == null) output = {};\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\n\n        for (var key of attrs) {\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\n                output[key] = input[key];\n        }\n\n        return output;\n    }\n\n    renderDocument(document: DocumentElement): HTMLElement {\n        var bodyElement = this.htmlDocument.createElement(\"section\");\n\n        bodyElement.className = this.className;\n\n        this.processElement(document);\n        this.renderChildren(document, bodyElement);\n\n        this.renderStyleValues(document.style, bodyElement);\n\n        if(document.props) {\n            var props = document.props;\n\n            if(props.pageMargins) {\n                bodyElement.style.paddingLeft = this.renderLength(props.pageMargins.left);\n                bodyElement.style.paddingRight = this.renderLength(props.pageMargins.right);\n                bodyElement.style.paddingTop = this.renderLength(props.pageMargins.top);\n                bodyElement.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\n            }\n\n            if(props.pageSize) {\n                if(!this.options.ignoreWidth)\n                    bodyElement.style.width = this.renderLength(props.pageSize.width);\n                if(!this.options.ignoreHeight)\n                    bodyElement.style.height = this.renderLength(props.pageSize.height);\n            }\n\n            if(props.columns && props.columns.numberOfColumns) {\n                bodyElement.style.columnCount = String(props.columns.numberOfColumns);\n                bodyElement.style.columnGap = this.renderLength(props.columns.space);\n\n                if(props.columns.separator) {\n                    bodyElement.style.columnRule = \"1px solid black\";\n                }\n            }\n        }\n\n        return bodyElement;\n    }\n\n    renderLength(l: Length): string {\n        return !l ? null : `${l.value}${l.type}`;\n    }\n\n    renderWrapper() {\n        var wrapper = document.createElement(\"div\");\n\n        wrapper.className = `${this.className}-wrapper`\n\n        return wrapper;\n    }\n\n    renderDefaultStyle() {\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; display: flex; justify-content: center; } \n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }\n                .${this.className} { color: black; }\n                section.${this.className} { box-sizing: border-box; }\n                .${this.className} table { border-collapse: collapse; }\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\n                .${this.className} p { margin: 0pt; }`;\n\n        return this.renderStyle(styleText);\n    }\n\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\n        var styleText = \"\";\n        var rootCounters = [];\n\n        for (var num of styles) {\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\n            var listStyleType = \"none\";\n\n            if (num.levelText && num.format == \"decimal\") {\n                let counter = this.numberingCounter(num.id, num.level);\n\n                if (num.level > 0) {\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\n                        \"counter-reset\": counter\n                    });\n                }\n                else {\n                    rootCounters.push(counter);\n                }\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\n                    \"counter-increment\": counter\n                });\n\n                styleText += this.styleToString(selector, {\n                    \"display\": \"list-item\",\n                    \"list-style-position\": \"inside\",\n                    \"list-style-type\": \"none\",\n                    ...num.style\n                });\n            }\n            else if (num.bullet) {\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": \"' '\",\n                    \"display\": \"inline-block\",\n                    \"background\": `var(${valiable})`\n                }, num.bullet.style);\n\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\n                    styleContainer.appendChild(this.renderStyle(text));\n                });\n            }\n            else {\n                listStyleType = this.numFormatToCssValue(num.format);\n            }\n\n            styleText += this.styleToString(selector, {\n                \"display\": \"list-item\",\n                \"list-style-position\": \"inside\",\n                \"list-style-type\": listStyleType,\n                ...num.style\n            });\n        }\n\n        if (rootCounters.length > 0) {\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\n                \"counter-reset\": rootCounters.join(\" \")\n            });\n        }\n\n        return this.renderStyle(styleText);\n    }\n\n    renderStyle(styleContent: string) {\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n        styleElement.innerHTML = styleContent;\n        return styleElement;\n    }\n\n    renderStyles(styles: IDomStyle[]): HTMLElement {\n        var styleText = \"\";\n\n        this.processStyles(styles);\n\n        for (let style of styles) {\n            for (var subStyle of style.styles) {\n                var selector = \"\";\n\n                if (style.target == subStyle.target)\n                    selector += `${style.target}.${style.id}`;\n                else if (style.target)\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\n                else\n                    selector += `.${style.id} ${subStyle.target}`;\n\n                if (style.isDefault && style.target)\n                    selector = `.${this.className} ${style.target}, ` + selector;\n\n                styleText += this.styleToString(selector, subStyle.values);\n            }\n        }\n\n        return this.renderStyle(styleText);\n    }\n\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\n        switch (elem.domType) {\n            case DomType.Paragraph:\n                return this.renderParagraph(<ParagraphElement>elem);\n\n            case DomType.Run:\n                return this.renderRun(<IDomRun>elem);\n\n            case DomType.Table:\n                return this.renderTable(elem);\n\n            case DomType.Row:\n                return this.renderTableRow(elem);\n\n            case DomType.Cell:\n                return this.renderTableCell(elem);\n\n            case DomType.Hyperlink:\n                return this.renderHyperlink(elem);\n\n            case DomType.Drawing:\n                return this.renderDrawing(<IDomImage>elem);\n\n            case DomType.Image:\n                return this.renderImage(<IDomImage>elem);\n        }\n\n        return null;\n    }\n\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\n        var result: HTMLElement[] = null;\n\n        if (elem.children != null)\n            result = elem.children.map(x => this.renderElement(x, elem)).filter(x => x != null);\n\n        if (into && result)\n            result.forEach(x => into.appendChild(x));\n\n        return result;\n    }\n\n    renderParagraph(elem: ParagraphElement) {\n        var result = this.htmlDocument.createElement(\"p\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        this.renderCommonProeprties(result, elem.props);\n\n        if (elem.numberingId && elem.numberingLevel != null) {\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\n        }\n\n        return result;\n    }\n\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\n        if(props == null)\n            return;\n\n        if(props.color) {\n            elem.style.color = props.color;\n        }\n\n        if (props.fontSize) {\n            elem.style.fontSize = this.renderLength(props.fontSize);\n        }\n    }\n\n    renderHyperlink(elem: IDomHyperlink) {\n        var result = this.htmlDocument.createElement(\"a\");\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        if (elem.href)\n            result.href = elem.href\n\n        return result;\n    }\n\n    renderDrawing(elem: IDomImage) {\n        var result = this.htmlDocument.createElement(\"div\");\n\n        result.style.display = \"inline-block\";\n        result.style.position = \"relative\";\n        result.style.textIndent = \"0px\";\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        return result;\n    }\n\n    renderImage(elem: IDomImage) {\n        let result = this.htmlDocument.createElement(\"img\");\n\n        this.renderStyleValues(elem.style, result);\n\n        if (this.document) {\n            this.document.loadDocumentImage(elem.src).then(x => {\n                result.src = x;\n            });\n        }\n\n        return result;\n    }\n\n    renderRun(elem: IDomRun) {\n        if (elem.break)\n            return this.htmlDocument.createElement(elem.break == \"page\" ? \"hr\" : \"br\");\n\n        var result = this.htmlDocument.createElement(\"span\");\n\n        if (elem.text)\n            result.textContent = elem.text;\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        if (elem.id) {\n            result.id = elem.id;\n        }\n\n        if (elem.tab) {\n            //TODO\n            // result.style.display = \"inline-block\";\n\n            // var paragraph = <IDomParagraph>elem.parent;\n\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\n            //     paragraph = <IDomParagraph>paragraph.parent;\n\n            // if (paragraph && paragraph.tabs) {\n            //     var tab = paragraph.tabs[0];\n\n            //     result.style.width = tab.position;\n\n            //     switch (tab.leader) {\n            //         case \"dot\":\n            //         case \"middleDot\":\n            //             result.style.borderBottom = \"1px black dotted\";\n            //             break;\n\n            //         case \"hyphen\":\n            //         case \"heavy\":\n            //         case \"underscore\":\n            //             result.style.borderBottom = \"1px black solid\";\n            //             break;\n            //     }\n            // }\n        }\n        else if (elem.href) {\n            var link = this.htmlDocument.createElement(\"a\");\n\n            link.href = elem.href;\n            link.appendChild(result);\n\n            return link;\n        }\n        else if (elem.wrapper) {\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\n            wrapper.appendChild(result);\n            return wrapper;\n        }\n\n        return result;\n    }\n\n    renderTable(elem: IDomTable) {\n        let result = this.htmlDocument.createElement(\"table\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        if (elem.columns)\n            result.appendChild(this.renderTableColumns(elem.columns));\n\n        return result;\n    }\n\n    renderTableColumns(columns: IDomTableColumn[]) {\n        let result = this.htmlDocument.createElement(\"colGroup\");\n\n        for (let col of columns) {\n            let colElem = this.htmlDocument.createElement(\"col\");\n\n            if (col.width)\n                colElem.style.width = `${col.width}px`;\n\n            result.appendChild(colElem);\n        }\n\n        return result;\n    }\n\n    renderTableRow(elem: OpenXmlElement) {\n        let result = this.htmlDocument.createElement(\"tr\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        return result;\n    }\n\n    renderTableCell(elem: IDomTableCell) {\n        let result = this.htmlDocument.createElement(\"td\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.style, result);\n\n        if (elem.span) result.colSpan = elem.span;\n\n        return result;\n    }\n\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\n        if (style == null)\n            return;\n\n        for (let key in style) {\n            if (style.hasOwnProperty(key)) {\n                ouput.style[key] = style[key];\n            }\n        }\n    }\n\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\n        if (input.className)\n            ouput.className = input.className;\n    }\n\n    numberingClass(id, lvl) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\n        let result = selectors + \" {\\r\\n\";\n\n        for (const key in values) {\n            result += `  ${key}: ${values[key]};\\r\\n`;\n        }\n\n        if (cssText)\n            result += \";\" + cssText;\n\n        return result + \"}\\r\\n\";\n    }\n\n    numberingCounter(id, lvl) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    levelTextToContent(text: string, id: string) {\n        var result = text.replace(/%\\d*/g, s => {\n            let lvl = parseInt(s.substring(1), 10) - 1;\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\n        });\n\n        return '\"' + result + '\"';\n    }\n\n    numFormatToCssValue(format: string) {\n        var mapping = {\n            \"none\": \"none\",\n            \"bullet\": \"disc\",\n            \"decimal\": \"decimal\",\n            \"lowerLetter\": \"lower-alpha\",\n            \"upperLetter\": \"upper-alpha\",\n            \"lowerRoman\": \"lower-roman\",\n            \"upperRoman\": \"upper-roman\",\n        };\n\n        return mapping[format] || format;\n    }\n}\n"],"sourceRoot":""}